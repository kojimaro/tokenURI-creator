{"version":3,"sources":["serviceWorker.js","index.js","utils/ipfs.js","App.js","upload-image-btn.js","metadata-fields.js","upload-json-btn.js","application-forms.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs_http_client__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","ipfs","n","ipfsClient","host","protocol","state","name","description","tokenURI","imagePath","isUploading","handleClick","event","_this","length","setState","metadata","image","JSON","stringify","buffer","types","Buffer","from","uploadTokenURI","handleName","target","value","handleDesc","handleFile","file","files","reader","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","_callee","_Users_admin_dev_react_projects_tokenURI_creator_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","result","sent","uploadImage","stop","this","_callee2","results","_context2","add","hash","_callee3","_context3","react__WEBPACK_IMPORTED_MODULE_7___default","className","_application_forms__WEBPACK_IMPORTED_MODULE_9__","Component","withStyles","theme","button","margin","input","display","props","classes","accept","id","type","onChange","onClick","htmlFor","style","Button_default","variant","color","component","container","flexWrap","textField","marginLeft","spacing","unit","marginRight","width","noValidate","autoComplete","TextField_default","label","fullWidth","multiline","rowsMax","root","Object","objectSpread","mixins","gutters","paddingTop","paddingBottom","Paper_default","elevation","Typography_default","gutterBottom","upload_image_btn","metadata_fields","upload_json_btn"],"mappings":"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","file":"static/js/main.49cb56a6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import ipfsClient from 'ipfs-http-client';\n\nconst ipfs = ipfsClient({host:'ipfs.infura.io', protocol:'https'});\n\nexport default ipfs;","import React, { Component } from 'react';\nimport ipfs from './utils/ipfs'; \nimport ApplicationForms from './application-forms';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        name: '',\n        description: '',\n        tokenURI: '',\n        imagePath: '',\n        isUploading: false,\n    }\n\n    handleClick = event => {\n        if(!this.state.imagePath.length > 0) return;\n        if(!this.state.name.length > 0 || !this.state.description.length > 0) return;\n        if(this.state.name.match(/[\\s\\t]/)||this.state.description.match(/[\\s\\t]/)) return;\n\n        this.setState({isUploading: true});\n\n        let metadata = {};\n        metadata.name = this.state.name;\n        metadata.description = this.state.description;\n        metadata.image = this.state.imagePath;\n        metadata = JSON.stringify(metadata);\n\n        let buffer = ipfs.types.Buffer.from(metadata);\n        this.uploadTokenURI(buffer);\n    }\n\n    handleName = event => {\n        this.setState({name: event.target.value});\n    }\n\n    handleDesc = event => {\n        this.setState({description: event.target.value});\n    }\n\n    handleFile = event => {\n        const file = event.target.files[0];\n    \n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = () => this.convertToBuffer(reader);\n    }\n    \n    convertToBuffer = async(reader) => {\n        this.setState({isUploading: true});\n\n        const buffer = await Buffer.from(reader.result);\n        this.uploadImage(buffer);\n    }\n\n    uploadImage = async(buffer) => {\n        let results = await ipfs.add(buffer);\n        this.setState({\n            imagePath: \"https://ipfs.io/ipfs/\"+results[0].hash,\n            isUploading: false\n        });\n    }\n\n    uploadTokenURI =  async(buffer) => {\n        let results = await ipfs.add(buffer);\n        this.setState({\n            tokenURI: \"https://ipfs.io/ipfs/\"+results[0].hash,\n            isUploading: false\n        }); \n    }\n\n    render() {\n        return (\n            <div className='App-header'>\n                <ApplicationForms \n                    handleClick={this.handleClick}\n                    handleFile={this.handleFile}\n                    handleName={this.handleName}\n                    handleDesc={this.handleDesc}\n                    isUploading={this.state.isUploading}\n                    tokenURI={this.state.tokenURI}\n                    imagePath={this.state.imagePath}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  button: {\n    margin: '5%',\n  },\n  input: {\n    display: 'none',\n  },\n});\n\nconst UploadImageBtn = props => {\n  const { classes, handleFile, isUploading } = props;\n\n  return (\n    <div>\n      <input\n        accept=\"image/*\"\n        className={classes.input}\n        id=\"outlined-button-file\"\n        type=\"file\"\n        onChange={handleFile}\n        onClick={(event)=>{event.target.value=null}}\n      />\n      <label\n        htmlFor=\"outlined-button-file\"\n        style={{display: isUploading ? 'none':'block'}}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          component=\"span\"\n          className={classes.button}\n        >\n          Upload image\n        </Button>\n      </label>\n\n      <p style={{display: isUploading ? 'block':'none'}}>\n        Now Uploading...\n      </p>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(UploadImageBtn);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n      width: 200,\n    }\n});\n\nconst MetadataFields = props => {\n    const {classes, imagePath, handleName, handleDesc} = props;\n    \n    return(\n        <form className={classes.container} noValidate autoComplete=\"off\">\n            <p>Image: <br/>{imagePath}</p>\n\n            <TextField\n                id=\"standard-name\"\n                label=\"Name\"\n                fullWidth\n                onChange={handleName}\n                margin=\"normal\"\n            />\n            <TextField\n                id=\"standard-multiline-flexible\"\n                label=\"Description\"\n                multiline\n                rowsMax=\"4\"\n                onChange={handleDesc}\n                fullWidth\n                margin=\"normal\"\n            />\n        </form>\n    );\n}\n\nexport default withStyles(styles)(MetadataFields);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  button: {\n    margin: '5%',\n  },\n  input: {\n    display: 'none',\n  },\n});\n\nconst UploadJsonBtn = props => {\n  const { classes, handleClick, isUploading } = props;\n\n  return (\n    <div>\n      <Button \n        variant=\"contained\" \n        color=\"primary\" \n        className={classes.button}\n        onClick={handleClick}\n        style={{display: isUploading ? 'none':'block'}}\n      >\n        Upload json\n      </Button>\n      <p style={{display: isUploading ? 'block':'none'}}>\n        Now Uploading...\n      </p>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(UploadJsonBtn);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport UploadImageBtn from './upload-image-btn';\nimport MetadataFields from './metadata-fields';\nimport UploadJsonBtn from './upload-json-btn';\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 4,\n    paddingBottom: theme.spacing.unit * 4,\n  },\n});\n\nconst ApplicationForm = props => {\n    const { \n        classes,\n        handleClick,\n        handleFile, \n        handleName, \n        handleDesc,\n        isUploading,\n        tokenURI,\n        imagePath\n    } = props;\n\n  return (\n    <div>\n      <Paper className={classes.root} elevation={1}>\n        <Typography variant=\"h2\" component=\"h2\" gutterBottom>\n          TOKEN-URI CREATOR\n        </Typography>\n        <Typography variant=\"h4\" component=\"h2\">\n          1. Uploading a image to ipfs.\n        </Typography>\n        <div>\n            <UploadImageBtn \n                handleFile={handleFile}\n                isUploading={isUploading}\n            />\n        </div>\n        <Typography variant=\"h4\" component=\"h2\">\n          2. Input metadata.\n        </Typography>\n        <div>\n            <MetadataFields \n                imagePath={imagePath}\n                handleName={handleName}\n                handleDesc={handleDesc}\n            />\n        </div>\n        <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n          3. Uploading JSON to ipfs.\n        </Typography>\n        <div>\n            <UploadJsonBtn \n                handleClick={handleClick}\n                isUploading={isUploading}\n            />\n        </div>\n        <Typography variant=\"h3\" component=\"h2\" gutterBottom>\n          Result\n        </Typography>\n        <pre>\n            <p>tokenURI:</p>\n            <Typography variant=\"h6\" gutterBottom>\n                {tokenURI}\n            </Typography>\n        </pre>\n      </Paper>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(ApplicationForm);"],"sourceRoot":""}